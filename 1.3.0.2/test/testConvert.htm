<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>linq.js test:Convert</title>

    <script type="text/javascript" src="../jsunit/app/jsUnitCore.js"></script>

    <script type="text/javascript" src="../linq.js"></script>

</head>
<body>
    <!-- This file is linq.js test for JsUnit -->

    <script>
    var E = Linq.Enumerable;
    var result;
    var correct;

    function testToArray()
    {
        result = E.Range(1, 10).ToArray();
        correct = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        assertArrayEquals(correct, result);
    }

    function testToJSON()
    {
        var s = E.Range(1, 10).ToJSON();
        result = eval("(" + s + ")");
        correct = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
        assertArrayEquals(correct, result);
    }

    function testToJSON2()
    {
        correct = [null, "az", [true, 52, [62, { z: { z: "na"}}], false], { a: 43, b: null }, 10];
        var s = E.From(correct).ToJSON();
        result = eval("(" + s + ")");
        assertArrayEquals(correct, result);
    }

    function testToLookup()
    {
        var fileList = ["temp.xls", "temp2.xls", "temp.pdf", "temp.jpg", "temp2.pdf"];
        result = E.From(fileList).ToLookup("file=>file.match(/\\.(.+$)/)[1]");
        correct = { xls: ["temp.xls", "temp2.xls"], pdf: ["temp.pdf", "temp2.pdf"], jpg: ["temp.jpg"] };
        assertObjectEquals(correct, result);
    }

    function testToLookup2()
    {
        var fileList = ["temp.xls", "temp2.xls", "temp.pdf", "temp.jpg", "temp2.pdf"];
        result = E.From(fileList).ToLookup("file=>file.match(/\\.(.+$)/)[1]", "file=>file +'ele'");
        correct = { xls: ["temp.xlsele", "temp2.xlsele"], pdf: ["temp.pdfele", "temp2.pdfele"], jpg: ["temp.jpgele"] };
        assertObjectEquals(correct, result);
    }

    function testToObject()
    {
        result = E.Range(1,3).ToObject("i=>'foo'+i","i=>i*4");
        correct = { foo1: 4, foo2: 8, foo3: 12 };
        assertObjectEquals(correct, result);
    }

    function testToString()
    {
        result = E.Range(1, 3).ToString();
        correct = "123";
        assertEquals(correct, result);
    }

    function testToString2()
    {
        result = E.Range(1, 3).ToString("-");
        correct = "1-2-3";
        assertEquals(correct, result);
    }

    function testToString3()
    {
        result = E.Range(1, 3).ToString("-","i=>i*2");
        correct = "2-4-6";
        assertEquals(correct, result);
    }

    function testToTable()
    {
        result = E.Repeat("foo",2).Select("v,i=>{v:v,i:i}").ToTable("t=>t.i", "t=>t.v");
        correct = "<table><tr><td>0</td><td>foo</td></tr><tr><td>1</td><td>foo</td></tr></table>";
        assertEquals(correct,result);
    }
    </script>

</body>
</html>
