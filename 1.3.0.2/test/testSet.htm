<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>linq.js test:Set</title>

    <script type="text/javascript" src="../jsunit/app/jsUnitCore.js"></script>

    <script type="text/javascript" src="../linq.js"></script>

</head>
<body>
    <!-- This file is linq.js test for JsUnit -->

    <script>
        var E = Linq.Enumerable;
        var result;
        var correct;
        var dummyObjects = E.Range(1, 10).Select("{test:$%3}");
        var dummyObjects2 = E.Range(1, 10).Select("{test:$%2}");

        function testAll()
        {
            var array = E.Range(1, 10);
            result = array.All("i=>i%2==0");
            correct = false;
            assertEquals(correct, result);
            result = array.All("i=>i<=10");
            correct = true;
            assertEquals(correct, result);
        }

        function testAny()
        {
            result = E.Range(1, 10).Any();
            correct = true;
            assertEquals(correct, result);
            result = E.Range(1, 0).Any();
            correct = false;
            assertEquals(correct, result);
        }

        function testAny2()
        {
            var array = E.Range(1, 10);
            result = array.Any("i=>i==100");
            correct = false;
            assertEquals(correct, result);
            result = array.Any("i=>i<=10");
            correct = true;
            assertEquals(correct, result);
        }

        function testConcat()
        {
            var array1 = E.Range(1, 3);
            var array2 = E.Range(20, 3);
            result = array1.Concat(array2);
            correct = [1, 2, 3, 20, 21, 22];
            assertArrayEquals(correct, result.ToArray());
        }

        function testInsert()
        {
            var seq1 = E.Range(1, 5);
            var seq2 = E.Range(20, 3);
            result = seq1.Insert(3,seq2);
            correct = [1, 2, 3, 20, 21, 22, 4, 5];
            assertArrayEquals(correct, result.ToArray());
        }

        function testContains()
        {
            var array = E.Range(1, 10);
            result = array.Contains(5);
            correct = true;
            assertEquals(correct, result);
            result = array.Contains(13);
            correct = false;
            assertEquals(correct, result);
        }

        function testContains2()
        {
            result = dummyObjects.Contains(1, "$.test");
            correct = true;
            assertEquals(correct, result);
            result = dummyObjects.Contains(3, "$.test");
            correct = false;
            assertEquals(correct, result);
        }

        function testDefaultIfEmpty()
        {
            var array = E.Range(1, 10);
            result = array.DefaultIfEmpty(199).ToArray();
            correct = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
            assertArrayEquals(correct, result);
            result = E.Range(1, 0).DefaultIfEmpty(199).Take(5).ToArray();
            correct = [199];
            assertArrayEquals(correct, result);
        }

        function testDistinct()
        {
            var array = [1, 3, 5, 6, 6, 3, 4, 3, 2, 9];
            result = E.From(array).Distinct().ToArray();
            correct = [1, 3, 5, 6, 4, 2, 9];
            assertArrayEquals(correct, result);
        }

        function testDistinct2()
        {
            result = dummyObjects.Distinct("$.test").Count();
            correct = 3;
            assertEquals(correct, result);
        }

        function testExcept()
        {
            var array = [1, 3, 5, 6, 6, 3, 4, 3, 2, 9];
            var array2 = [4, 6, 2, 7, 8, 10, 11];
            result = E.From(array).Except(E.From(array2)).ToArray();
            correct = [1, 3, 5, 9];
            assertArrayEquals(correct, result);
        }

        function testExcept2()
        {
            result = dummyObjects.Except(dummyObjects2, "$.test").Count();
            correct = 1;
            assertEquals(correct, result);
        }

        function testIntersect()
        {
            var array = [1, 3, 5, 6, 6, 3, 4, 3, 2, 9];
            var array2 = [4, 6, 2, 7, 8, 10, 11];
            result = E.From(array).Intersect(E.From(array2)).ToArray();
            correct = [6, 4, 2];
            assertArrayEquals(correct, result);
        }

        function testIntersect2()
        {
            result = dummyObjects.Intersect(dummyObjects2, "$.test").ToArray();
            correct = [{ test: 1 }, { test: 0}];
            assertArrayEquals(correct, result);
        }

        function testSequenceEqual()
        {
            var array = [1, 3, 5, 6, 6, 3, 4, 3, 2, 9];
            var array2 = [4, 6, 2, 7, 8, 10, 11];
            result = E.From(array).SequenceEqual(E.From(array2));
            correct = false;
            assertEquals(correct, result);
            result = E.Range(1, 10).SequenceEqual(E.Range(1, 10));
            correct = true;
            assertEquals(correct, result);
        }

        function testSequenceEqual2()
        {
            result = dummyObjects.SequenceEqual(dummyObjects2, "$.test");
            correct = false;
            assertEquals(correct, result);
            var newArr = E.Range(1, 10).Select("{test:$%3}");
            result = dummyObjects.SequenceEqual(newArr, "$.test");
            correct = true;
            assertEquals(correct, result);
        }

        function testUnion()
        {
            var array = [1, 3, 5, 6, 6, 3, 4, 3, 2, 9];
            var array2 = [4, 6, 2, 7, 8, 10, 11];
            result = E.From(array).Union(E.From(array2)).ToArray();
            correct = [1, 3, 5, 6, 4, 2, 9, 7, 8, 10, 11];
            assertArrayEquals(correct, result);
        }

        function testUnion2()
        {
            result = dummyObjects.Union(dummyObjects2, "$.test").ToArray();
            correct = [{ test: 1 }, { test: 2 }, { test: 0}];
            assertArrayEquals(correct, result);
        }
    </script>

</body>
</html>
