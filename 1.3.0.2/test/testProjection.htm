<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>linq.js test:Projection</title>

    <script type="text/javascript" src="../jsunit/app/jsUnitCore.js"></script>

    <script type="text/javascript" src="../linq.js"></script>

</head>
<body>
    <!-- This file is linq.js test for JsUnit -->

    <script>
        var E = Linq.Enumerable;
        var result;
        var correct;

        function testCascadeDepthFirst()
        {
            result = E.Make(1).CascadeDepthFirst("$+$").Take(7).ToArray();
            correct = [1, 2, 4, 8, 16, 32, 64];
            assertArrayEquals(correct, result);
        }

        function testCascadeDepthFirst2()
        {
            result = E.Make(1).CascadeDepthFirst("$+$","v,nl=>{v:v,nl:nl}").Take(3).ToArray();
            correct = [{ v: 1, nl: 0 }, { v: 2, nl: 1 }, { v: 4, nl: 2}];
            assertArrayEquals(correct, result);
        }

        function testCascadeBreadthFirst()
        {
            result = E.Make(1).CascadeBreadthFirst("$+$").Take(7).ToArray();
            correct = [1, 2, 4, 8, 16, 32, 64];
            assertArrayEquals(correct, result);
        }

        function testCascadeBreadthFirst2()
        {
            result = E.Make(1).CascadeBreadthFirst("$+$", "v,nl=>{v:v,nl:nl}").Take(3).ToArray();
            correct = [{ v: 1, nl: 0 }, { v: 2, nl: 1 }, { v: 4, nl: 2}];
            assertArrayEquals(correct, result);
        }

        function testFlatten()
        {
            var array = [1, 31, [431, 41, 5], [1431, 43, [344, 3], 43], 43];
            result = E.From(array).Flatten().ToArray();
            correct = [1, 31, 431, 41, 5, 1431, 43, 344, 3, 43, 43];
            assertArrayEquals(correct, result);
        }

        function testPairwise()
        {
            result = E.Range(1, 4).Pairwise("prev,next=>{p:prev,n:next}");
            correct = [{ p: 1, n: 2 }, { p: 2, n: 3 }, { p: 3, b: 4}];
            assertArrayEquals(correct, result.ToArray());
        }

        function testScan1()
        {
            result = E.Range(1, 10).Scan("a,b=>a+b");
            correct = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55];
            assertArrayEquals(correct, result.ToArray());
        }

        function testScan2()
        {
            var seed = 100;
            result = E.Range(1, 10).Scan(seed, "a,b=>a+b");
            correct = [100, 101, 103, 106, 110, 115, 121, 128, 136, 145, 155];
            assertArrayEquals(correct, result.ToArray());
        }

        function testScan3()
        {
            var seed = 100;
            result = E.Range(1, 10).Scan(seed, "a,b=>a+b", "val=>val*10");
            correct = [1000, 1010, 1030, 1060, 1100, 1150, 1210, 1280, 1360, 1450, 1550];
            assertArrayEquals(correct, result.ToArray());
        }

        function testSelect()
        {
            result = E.Range(1, 10).Select("i=>i*10");
            correct = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
            assertArrayEquals(correct, result.ToArray());
        }

        function testSelect2()
        {
            result = E.Range(1, 10).Select("i,index=>i*10+index");
            correct = [10, 21, 32, 43, 54, 65, 76, 87, 98, 109];
            assertArrayEquals(correct, result.ToArray());
        }

        function testSelectMany()
        {
            result = E.Range(1, 5).SelectMany("i=>E.Repeat(i,2)");
            correct = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5];
            assertArrayEquals(correct, result.ToArray());
        }

        function testSelectMany2()
        {
            result = E.Range(1, 5).SelectMany("i,index=>E.Repeat(i,index+1)");
            correct = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5];
            assertArrayEquals(correct, result.ToArray());
        }

        function testSelectMany3()
        {
            result = E.Range(1, 5).SelectMany("i=>E.Repeat(i,2)","i=>i*10");
            correct = [10, 10, 20, 20, 30, 30, 40, 40, 50, 50];
            assertArrayEquals(correct, result.ToArray());
        }

        function testSelectMany4()
        {
            result = E.Range(1, 5).SelectMany("i,index=>E.Repeat(i,index+1)","i=>i*10");
            correct = [10, 20, 20, 30, 30, 30, 40, 40, 40, 40, 50, 50, 50, 50, 50];
            assertArrayEquals(correct, result.ToArray());
        }

        function testSlice()
        {
            result = E.Range(1, 10).Slice("3");
            correct = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]];
            assertArrayEquals(correct, result.ToArray());
        }

        function testWhere()
        {
            result = E.Range(1, 10).Where("i=>i%2==0");
            correct = [2, 4, 6, 8, 10];
            assertArrayEquals(correct, result.ToArray());
        }

        function testWhere2()
        {
            result = E.Range(1, 10).Where("i,index=>(i+index)%3==0");
            correct = [2, 5, 8];
            assertArrayEquals(correct, result.ToArray());
        }

        function testZipWith()
        {
            result = E.Range(1, 10).ZipWith(E.Range(20, 5),"outer,inner=>outer+inner");
            correct = [21, 23, 25, 27, 29];
            assertArrayEquals(correct, result.ToArray());
        }

        function testZipWith2()
        {
            result = E.Range(1, 10).ZipWith(E.Range(20, 5), "outer,inner,index=>outer+inner+index");
            correct = [21, 24, 27, 30, 33];
            assertArrayEquals(correct, result.ToArray());
        }

    </script>

</body>
</html>
