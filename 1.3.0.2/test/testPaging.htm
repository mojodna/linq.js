<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>linq.js test:Paging</title>

    <script type="text/javascript" src="../jsunit/app/jsUnitCore.js"></script>

    <script type="text/javascript" src="../linq.js"></script>

</head>
<body>
    <!-- This file is linq.js test for JsUnit -->

    <script>
        var E = Linq.Enumerable;
        var result;
        var correct;

        function testElementAt()
        {
            result = E.Range(1, 10).ElementAt(5);
            correct = 6;
            assertEquals(correct, result);
        }

        function testElementAtOrDefault()
        {
            result = E.Range(1, 10).ElementAtOrDefault(3, "foo");
            correct = 4;
            assertEquals(correct, result);
            result = E.Range(1, 10).ElementAtOrDefault(31, "foo");
            correct = "foo";
            assertEquals(correct, result);
        }

        function testFirst()
        {
            result = E.Range(1, 10).First();
            correct = 1;
            assertEquals(correct, result);
        }

        function testFirst2()
        {
            result = E.Range(1, 10).First("i=>i*3==6");
            correct = 2;
            assertEquals(correct, result);
        }

        function testFirstOrDefault()
        {
            result = E.Range(1, 10).FirstOrDefault(4);
            correct = 1;
            assertEquals(correct, result);
            result = E.Range(1, 10).Skip(11).FirstOrDefault(4);
            correct = 4;
            assertEquals(correct, result);
        }

        function testFirstOrDefault2()
        {
            result = E.Range(1, 10).FirstOrDefault(4, "i=>i*3==6");
            correct = 2;
            assertEquals(correct, result);
            result = E.Range(1, 10).FirstOrDefault(40, "i=>i>13");
            correct = 40;
            assertEquals(correct, result);
        }

        function testLast()
        {
            result = E.Range(1, 10).Last();
            correct = 10;
            assertEquals(correct, result);
        }

        function testLast2()
        {
            result = E.Range(1, 10).Last("i=>i<6");
            correct = 5;
            assertEquals(correct, result);
        }

        function testLastOrDefault()
        {
            result = E.Range(1, 10).LastOrDefault(34);
            correct = 10;
            assertEquals(correct, result);
            result = E.Range(1, 10).Skip(11).LastOrDefault(34);
            correct = 34;
            assertEquals(correct, result);
        }

        function testLastOrDefault2()
        {
            result = E.Range(1, 10).LastOrDefault(4, "i=>i*3<=6");
            correct = 2;
            assertEquals(correct, result);
            result = E.Range(1, 10).LastOrDefault(40, "i=>i>13");
            correct = 40;
            assertEquals(correct, result);
        }

        function testSingle()
        {
            result = E.Range(1, 1).Single();
            correct = 1;
            assertEquals(correct, result);
        }

        function testSingle2()
        {
            result = E.Range(1, 10).Single("i=>i==6");
            correct = 6;
            assertEquals(correct, result);
        }

        function testSingleOrDefault()
        {
            result = E.Range(1, 1).SingleOrDefault(34);
            correct = 1;
            assertEquals(correct, result);
            result = E.Range(1, 10).Skip(11).SingleOrDefault(34);
            correct = 34;
            assertEquals(correct, result);
        }

        function testSingleOrDefault2()
        {
            result = E.Range(1, 10).SingleOrDefault(4, "i=>i*3==6");
            correct = 2;
            assertEquals(correct, result);
            result = E.Range(1, 10).SingleOrDefault(40, "i=>i>13");
            correct = 40;
            assertEquals(correct, result);
        }

        function testSkip()
        {
            result = E.Range(1, 10).Skip(4).ToArray();
            correct = [5, 6, 7, 8, 9, 10];
            assertArrayEquals(correct, result);
        }

        function testSkipWhile()
        {
            result = E.Range(1, 10).SkipWhile("i=>i<8").ToArray();
            correct = [8, 9, 10];
            assertArrayEquals(correct, result);
        }

        function testSkipWhile2()
        {
            result = E.Range(1, 10).SkipWhile("v,i=>i<8").ToArray();
            correct = [9, 10];
            assertArrayEquals(correct, result);
        }

        function testTake()
        {
            result = E.Range(1, 10).Take(4).ToArray();
            correct = [1,2,3,4];
            assertArrayEquals(correct, result);
        }

        function testTakeWhile()
        {
            result = E.Range(1, 10).TakeWhile("i=>i<8").ToArray();
            correct = [1, 2, 3, 4, 5, 6, 7];
            assertArrayEquals(correct, result);
        }

        function testTakeWhile2()
        {
            result = E.Range(1, 10).TakeWhile("v,i=>i<8").ToArray();
            correct = [1, 2, 3, 4, 5, 6, 7, 8];
            assertArrayEquals(correct, result);
        }

        function testIndexOf()
        {
            result = E.Range(1, 10).IndexOf(3);
            correct = 2;
            assertEquals(correct, result);
        }

        function testLastIndexOf()
        {
            result = E.From([1, 2, 3, 2, 5]).LastIndexOf(2)
            correct = 3;
            assertEquals(correct, result);
        }


    </script>

</body>
</html>
